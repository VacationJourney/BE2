module.exports = {
        typeDefs: // Code generated by Prisma (prisma@1.23.0-test.3). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

/* GraphQL */ `type AggregateEvent {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type AggregateVacation {
  count: Int!
}

type BatchPayload {
  count: Long!
}

type Event {
  id: ID!
  date: String!
  startTime: String
  endTime: String
  title: String!
  description: String
  trip: Vacation
}

type EventConnection {
  pageInfo: PageInfo!
  edges: [EventEdge]!
  aggregate: AggregateEvent!
}

input EventCreateInput {
  id: ID
  date: String!
  startTime: String
  endTime: String
  title: String!
  description: String
  trip: VacationCreateOneWithoutEventsInput
}

input EventCreateManyWithoutTripInput {
  create: [EventCreateWithoutTripInput!]
  connect: [EventWhereUniqueInput!]
}

input EventCreateWithoutTripInput {
  id: ID
  date: String!
  startTime: String
  endTime: String
  title: String!
  description: String
}

type EventEdge {
  node: Event!
  cursor: String!
}

enum EventOrderByInput {
  id_ASC
  id_DESC
  date_ASC
  date_DESC
  startTime_ASC
  startTime_DESC
  endTime_ASC
  endTime_DESC
  title_ASC
  title_DESC
  description_ASC
  description_DESC
}

type EventPreviousValues {
  id: ID!
  date: String!
  startTime: String
  endTime: String
  title: String!
  description: String
}

input EventScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  date: String
  date_not: String
  date_in: [String!]
  date_not_in: [String!]
  date_lt: String
  date_lte: String
  date_gt: String
  date_gte: String
  date_contains: String
  date_not_contains: String
  date_starts_with: String
  date_not_starts_with: String
  date_ends_with: String
  date_not_ends_with: String
  startTime: String
  startTime_not: String
  startTime_in: [String!]
  startTime_not_in: [String!]
  startTime_lt: String
  startTime_lte: String
  startTime_gt: String
  startTime_gte: String
  startTime_contains: String
  startTime_not_contains: String
  startTime_starts_with: String
  startTime_not_starts_with: String
  startTime_ends_with: String
  startTime_not_ends_with: String
  endTime: String
  endTime_not: String
  endTime_in: [String!]
  endTime_not_in: [String!]
  endTime_lt: String
  endTime_lte: String
  endTime_gt: String
  endTime_gte: String
  endTime_contains: String
  endTime_not_contains: String
  endTime_starts_with: String
  endTime_not_starts_with: String
  endTime_ends_with: String
  endTime_not_ends_with: String
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  AND: [EventScalarWhereInput!]
  OR: [EventScalarWhereInput!]
  NOT: [EventScalarWhereInput!]
}

type EventSubscriptionPayload {
  mutation: MutationType!
  node: Event
  updatedFields: [String!]
  previousValues: EventPreviousValues
}

input EventSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: EventWhereInput
  AND: [EventSubscriptionWhereInput!]
  OR: [EventSubscriptionWhereInput!]
  NOT: [EventSubscriptionWhereInput!]
}

input EventUpdateInput {
  date: String
  startTime: String
  endTime: String
  title: String
  description: String
  trip: VacationUpdateOneWithoutEventsInput
}

input EventUpdateManyDataInput {
  date: String
  startTime: String
  endTime: String
  title: String
  description: String
}

input EventUpdateManyMutationInput {
  date: String
  startTime: String
  endTime: String
  title: String
  description: String
}

input EventUpdateManyWithoutTripInput {
  create: [EventCreateWithoutTripInput!]
  delete: [EventWhereUniqueInput!]
  connect: [EventWhereUniqueInput!]
  set: [EventWhereUniqueInput!]
  disconnect: [EventWhereUniqueInput!]
  update: [EventUpdateWithWhereUniqueWithoutTripInput!]
  upsert: [EventUpsertWithWhereUniqueWithoutTripInput!]
  deleteMany: [EventScalarWhereInput!]
  updateMany: [EventUpdateManyWithWhereNestedInput!]
}

input EventUpdateManyWithWhereNestedInput {
  where: EventScalarWhereInput!
  data: EventUpdateManyDataInput!
}

input EventUpdateWithoutTripDataInput {
  date: String
  startTime: String
  endTime: String
  title: String
  description: String
}

input EventUpdateWithWhereUniqueWithoutTripInput {
  where: EventWhereUniqueInput!
  data: EventUpdateWithoutTripDataInput!
}

input EventUpsertWithWhereUniqueWithoutTripInput {
  where: EventWhereUniqueInput!
  update: EventUpdateWithoutTripDataInput!
  create: EventCreateWithoutTripInput!
}

input EventWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  date: String
  date_not: String
  date_in: [String!]
  date_not_in: [String!]
  date_lt: String
  date_lte: String
  date_gt: String
  date_gte: String
  date_contains: String
  date_not_contains: String
  date_starts_with: String
  date_not_starts_with: String
  date_ends_with: String
  date_not_ends_with: String
  startTime: String
  startTime_not: String
  startTime_in: [String!]
  startTime_not_in: [String!]
  startTime_lt: String
  startTime_lte: String
  startTime_gt: String
  startTime_gte: String
  startTime_contains: String
  startTime_not_contains: String
  startTime_starts_with: String
  startTime_not_starts_with: String
  startTime_ends_with: String
  startTime_not_ends_with: String
  endTime: String
  endTime_not: String
  endTime_in: [String!]
  endTime_not_in: [String!]
  endTime_lt: String
  endTime_lte: String
  endTime_gt: String
  endTime_gte: String
  endTime_contains: String
  endTime_not_contains: String
  endTime_starts_with: String
  endTime_not_starts_with: String
  endTime_ends_with: String
  endTime_not_ends_with: String
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  trip: VacationWhereInput
  AND: [EventWhereInput!]
  OR: [EventWhereInput!]
  NOT: [EventWhereInput!]
}

input EventWhereUniqueInput {
  id: ID
}

scalar Long

type Mutation {
  createEvent(data: EventCreateInput!): Event!
  updateEvent(data: EventUpdateInput!, where: EventWhereUniqueInput!): Event
  updateManyEvents(data: EventUpdateManyMutationInput!, where: EventWhereInput): BatchPayload!
  upsertEvent(where: EventWhereUniqueInput!, create: EventCreateInput!, update: EventUpdateInput!): Event!
  deleteEvent(where: EventWhereUniqueInput!): Event
  deleteManyEvents(where: EventWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  createVacation(data: VacationCreateInput!): Vacation!
  updateVacation(data: VacationUpdateInput!, where: VacationWhereUniqueInput!): Vacation
  updateManyVacations(data: VacationUpdateManyMutationInput!, where: VacationWhereInput): BatchPayload!
  upsertVacation(where: VacationWhereUniqueInput!, create: VacationCreateInput!, update: VacationUpdateInput!): Vacation!
  deleteVacation(where: VacationWhereUniqueInput!): Vacation
  deleteManyVacations(where: VacationWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  event(where: EventWhereUniqueInput!): Event
  events(where: EventWhereInput, orderBy: EventOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Event]!
  eventsConnection(where: EventWhereInput, orderBy: EventOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): EventConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  vacation(where: VacationWhereUniqueInput!): Vacation
  vacations(where: VacationWhereInput, orderBy: VacationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Vacation]!
  vacationsConnection(where: VacationWhereInput, orderBy: VacationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): VacationConnection!
  node(id: ID!): Node
}

type Subscription {
  event(where: EventSubscriptionWhereInput): EventSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  vacation(where: VacationSubscriptionWhereInput): VacationSubscriptionPayload
}

type User {
  id: ID!
  username: String!
  name: String
  email: String
  password: String!
  vacations(where: VacationWhereInput, orderBy: VacationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Vacation!]
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  username: String!
  name: String
  email: String
  password: String!
  vacations: VacationCreateManyWithoutTravelerInput
}

input UserCreateOneWithoutVacationsInput {
  create: UserCreateWithoutVacationsInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutVacationsInput {
  id: ID
  username: String!
  name: String
  email: String
  password: String!
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  username_ASC
  username_DESC
  name_ASC
  name_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
}

type UserPreviousValues {
  id: ID!
  username: String!
  name: String
  email: String
  password: String!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateInput {
  username: String
  name: String
  email: String
  password: String
  vacations: VacationUpdateManyWithoutTravelerInput
}

input UserUpdateManyMutationInput {
  username: String
  name: String
  email: String
  password: String
}

input UserUpdateOneWithoutVacationsInput {
  create: UserCreateWithoutVacationsInput
  update: UserUpdateWithoutVacationsDataInput
  upsert: UserUpsertWithoutVacationsInput
  delete: Boolean
  disconnect: Boolean
  connect: UserWhereUniqueInput
}

input UserUpdateWithoutVacationsDataInput {
  username: String
  name: String
  email: String
  password: String
}

input UserUpsertWithoutVacationsInput {
  update: UserUpdateWithoutVacationsDataInput!
  create: UserCreateWithoutVacationsInput!
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  username: String
  username_not: String
  username_in: [String!]
  username_not_in: [String!]
  username_lt: String
  username_lte: String
  username_gt: String
  username_gte: String
  username_contains: String
  username_not_contains: String
  username_starts_with: String
  username_not_starts_with: String
  username_ends_with: String
  username_not_ends_with: String
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  vacations_every: VacationWhereInput
  vacations_some: VacationWhereInput
  vacations_none: VacationWhereInput
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
  username: String
}

type Vacation {
  id: ID!
  title: String!
  startDate: String!
  endDate: String!
  events(where: EventWhereInput, orderBy: EventOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Event!]
  traveler: User
}

type VacationConnection {
  pageInfo: PageInfo!
  edges: [VacationEdge]!
  aggregate: AggregateVacation!
}

input VacationCreateInput {
  id: ID
  title: String!
  startDate: String!
  endDate: String!
  events: EventCreateManyWithoutTripInput
  traveler: UserCreateOneWithoutVacationsInput
}

input VacationCreateManyWithoutTravelerInput {
  create: [VacationCreateWithoutTravelerInput!]
  connect: [VacationWhereUniqueInput!]
}

input VacationCreateOneWithoutEventsInput {
  create: VacationCreateWithoutEventsInput
  connect: VacationWhereUniqueInput
}

input VacationCreateWithoutEventsInput {
  id: ID
  title: String!
  startDate: String!
  endDate: String!
  traveler: UserCreateOneWithoutVacationsInput
}

input VacationCreateWithoutTravelerInput {
  id: ID
  title: String!
  startDate: String!
  endDate: String!
  events: EventCreateManyWithoutTripInput
}

type VacationEdge {
  node: Vacation!
  cursor: String!
}

enum VacationOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  startDate_ASC
  startDate_DESC
  endDate_ASC
  endDate_DESC
}

type VacationPreviousValues {
  id: ID!
  title: String!
  startDate: String!
  endDate: String!
}

input VacationScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  startDate: String
  startDate_not: String
  startDate_in: [String!]
  startDate_not_in: [String!]
  startDate_lt: String
  startDate_lte: String
  startDate_gt: String
  startDate_gte: String
  startDate_contains: String
  startDate_not_contains: String
  startDate_starts_with: String
  startDate_not_starts_with: String
  startDate_ends_with: String
  startDate_not_ends_with: String
  endDate: String
  endDate_not: String
  endDate_in: [String!]
  endDate_not_in: [String!]
  endDate_lt: String
  endDate_lte: String
  endDate_gt: String
  endDate_gte: String
  endDate_contains: String
  endDate_not_contains: String
  endDate_starts_with: String
  endDate_not_starts_with: String
  endDate_ends_with: String
  endDate_not_ends_with: String
  AND: [VacationScalarWhereInput!]
  OR: [VacationScalarWhereInput!]
  NOT: [VacationScalarWhereInput!]
}

type VacationSubscriptionPayload {
  mutation: MutationType!
  node: Vacation
  updatedFields: [String!]
  previousValues: VacationPreviousValues
}

input VacationSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: VacationWhereInput
  AND: [VacationSubscriptionWhereInput!]
  OR: [VacationSubscriptionWhereInput!]
  NOT: [VacationSubscriptionWhereInput!]
}

input VacationUpdateInput {
  title: String
  startDate: String
  endDate: String
  events: EventUpdateManyWithoutTripInput
  traveler: UserUpdateOneWithoutVacationsInput
}

input VacationUpdateManyDataInput {
  title: String
  startDate: String
  endDate: String
}

input VacationUpdateManyMutationInput {
  title: String
  startDate: String
  endDate: String
}

input VacationUpdateManyWithoutTravelerInput {
  create: [VacationCreateWithoutTravelerInput!]
  delete: [VacationWhereUniqueInput!]
  connect: [VacationWhereUniqueInput!]
  set: [VacationWhereUniqueInput!]
  disconnect: [VacationWhereUniqueInput!]
  update: [VacationUpdateWithWhereUniqueWithoutTravelerInput!]
  upsert: [VacationUpsertWithWhereUniqueWithoutTravelerInput!]
  deleteMany: [VacationScalarWhereInput!]
  updateMany: [VacationUpdateManyWithWhereNestedInput!]
}

input VacationUpdateManyWithWhereNestedInput {
  where: VacationScalarWhereInput!
  data: VacationUpdateManyDataInput!
}

input VacationUpdateOneWithoutEventsInput {
  create: VacationCreateWithoutEventsInput
  update: VacationUpdateWithoutEventsDataInput
  upsert: VacationUpsertWithoutEventsInput
  delete: Boolean
  disconnect: Boolean
  connect: VacationWhereUniqueInput
}

input VacationUpdateWithoutEventsDataInput {
  title: String
  startDate: String
  endDate: String
  traveler: UserUpdateOneWithoutVacationsInput
}

input VacationUpdateWithoutTravelerDataInput {
  title: String
  startDate: String
  endDate: String
  events: EventUpdateManyWithoutTripInput
}

input VacationUpdateWithWhereUniqueWithoutTravelerInput {
  where: VacationWhereUniqueInput!
  data: VacationUpdateWithoutTravelerDataInput!
}

input VacationUpsertWithoutEventsInput {
  update: VacationUpdateWithoutEventsDataInput!
  create: VacationCreateWithoutEventsInput!
}

input VacationUpsertWithWhereUniqueWithoutTravelerInput {
  where: VacationWhereUniqueInput!
  update: VacationUpdateWithoutTravelerDataInput!
  create: VacationCreateWithoutTravelerInput!
}

input VacationWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  startDate: String
  startDate_not: String
  startDate_in: [String!]
  startDate_not_in: [String!]
  startDate_lt: String
  startDate_lte: String
  startDate_gt: String
  startDate_gte: String
  startDate_contains: String
  startDate_not_contains: String
  startDate_starts_with: String
  startDate_not_starts_with: String
  startDate_ends_with: String
  startDate_not_ends_with: String
  endDate: String
  endDate_not: String
  endDate_in: [String!]
  endDate_not_in: [String!]
  endDate_lt: String
  endDate_lte: String
  endDate_gt: String
  endDate_gte: String
  endDate_contains: String
  endDate_not_contains: String
  endDate_starts_with: String
  endDate_not_starts_with: String
  endDate_ends_with: String
  endDate_not_ends_with: String
  events_every: EventWhereInput
  events_some: EventWhereInput
  events_none: EventWhereInput
  traveler: UserWhereInput
  AND: [VacationWhereInput!]
  OR: [VacationWhereInput!]
  NOT: [VacationWhereInput!]
}

input VacationWhereUniqueInput {
  id: ID
}
`
      }
    