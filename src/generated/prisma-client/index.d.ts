// Code generated by Prisma (prisma@1.23.0-test.3). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  event: (where?: EventWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
  vacation: (where?: VacationWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  event: (where: EventWhereUniqueInput) => EventNullablePromise;
  events: (args?: {
    where?: EventWhereInput;
    orderBy?: EventOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Event>;
  eventsConnection: (args?: {
    where?: EventWhereInput;
    orderBy?: EventOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => EventConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  vacation: (where: VacationWhereUniqueInput) => VacationNullablePromise;
  vacations: (args?: {
    where?: VacationWhereInput;
    orderBy?: VacationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Vacation>;
  vacationsConnection: (args?: {
    where?: VacationWhereInput;
    orderBy?: VacationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => VacationConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createEvent: (data: EventCreateInput) => EventPromise;
  updateEvent: (args: {
    data: EventUpdateInput;
    where: EventWhereUniqueInput;
  }) => EventPromise;
  updateManyEvents: (args: {
    data: EventUpdateManyMutationInput;
    where?: EventWhereInput;
  }) => BatchPayloadPromise;
  upsertEvent: (args: {
    where: EventWhereUniqueInput;
    create: EventCreateInput;
    update: EventUpdateInput;
  }) => EventPromise;
  deleteEvent: (where: EventWhereUniqueInput) => EventPromise;
  deleteManyEvents: (where?: EventWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;
  createVacation: (data: VacationCreateInput) => VacationPromise;
  updateVacation: (args: {
    data: VacationUpdateInput;
    where: VacationWhereUniqueInput;
  }) => VacationPromise;
  updateManyVacations: (args: {
    data: VacationUpdateManyMutationInput;
    where?: VacationWhereInput;
  }) => BatchPayloadPromise;
  upsertVacation: (args: {
    where: VacationWhereUniqueInput;
    create: VacationCreateInput;
    update: VacationUpdateInput;
  }) => VacationPromise;
  deleteVacation: (where: VacationWhereUniqueInput) => VacationPromise;
  deleteManyVacations: (where?: VacationWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  event: (
    where?: EventSubscriptionWhereInput
  ) => EventSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
  vacation: (
    where?: VacationSubscriptionWhereInput
  ) => VacationSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type EventOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "date_ASC"
  | "date_DESC"
  | "startTime_ASC"
  | "startTime_DESC"
  | "endTime_ASC"
  | "endTime_DESC"
  | "title_ASC"
  | "title_DESC"
  | "description_ASC"
  | "description_DESC";

export type VacationOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "title_ASC"
  | "title_DESC"
  | "startDate_ASC"
  | "startDate_DESC"
  | "endDate_ASC"
  | "endDate_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "username_ASC"
  | "username_DESC"
  | "name_ASC"
  | "name_DESC"
  | "email_ASC"
  | "email_DESC"
  | "password_ASC"
  | "password_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export interface VacationUpsertWithoutEventsInput {
  update: VacationUpdateWithoutEventsDataInput;
  create: VacationCreateWithoutEventsInput;
}

export type EventWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface VacationCreateWithoutEventsInput {
  id?: Maybe<ID_Input>;
  title: String;
  startDate: String;
  endDate: String;
  traveler?: Maybe<UserCreateOneWithoutVacationsInput>;
}

export interface EventUpdateManyWithoutTripInput {
  create?: Maybe<EventCreateWithoutTripInput[] | EventCreateWithoutTripInput>;
  delete?: Maybe<EventWhereUniqueInput[] | EventWhereUniqueInput>;
  connect?: Maybe<EventWhereUniqueInput[] | EventWhereUniqueInput>;
  set?: Maybe<EventWhereUniqueInput[] | EventWhereUniqueInput>;
  disconnect?: Maybe<EventWhereUniqueInput[] | EventWhereUniqueInput>;
  update?: Maybe<
    | EventUpdateWithWhereUniqueWithoutTripInput[]
    | EventUpdateWithWhereUniqueWithoutTripInput
  >;
  upsert?: Maybe<
    | EventUpsertWithWhereUniqueWithoutTripInput[]
    | EventUpsertWithWhereUniqueWithoutTripInput
  >;
  deleteMany?: Maybe<EventScalarWhereInput[] | EventScalarWhereInput>;
  updateMany?: Maybe<
    EventUpdateManyWithWhereNestedInput[] | EventUpdateManyWithWhereNestedInput
  >;
}

export interface UserCreateOneWithoutVacationsInput {
  create?: Maybe<UserCreateWithoutVacationsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface VacationWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  startDate?: Maybe<String>;
  startDate_not?: Maybe<String>;
  startDate_in?: Maybe<String[] | String>;
  startDate_not_in?: Maybe<String[] | String>;
  startDate_lt?: Maybe<String>;
  startDate_lte?: Maybe<String>;
  startDate_gt?: Maybe<String>;
  startDate_gte?: Maybe<String>;
  startDate_contains?: Maybe<String>;
  startDate_not_contains?: Maybe<String>;
  startDate_starts_with?: Maybe<String>;
  startDate_not_starts_with?: Maybe<String>;
  startDate_ends_with?: Maybe<String>;
  startDate_not_ends_with?: Maybe<String>;
  endDate?: Maybe<String>;
  endDate_not?: Maybe<String>;
  endDate_in?: Maybe<String[] | String>;
  endDate_not_in?: Maybe<String[] | String>;
  endDate_lt?: Maybe<String>;
  endDate_lte?: Maybe<String>;
  endDate_gt?: Maybe<String>;
  endDate_gte?: Maybe<String>;
  endDate_contains?: Maybe<String>;
  endDate_not_contains?: Maybe<String>;
  endDate_starts_with?: Maybe<String>;
  endDate_not_starts_with?: Maybe<String>;
  endDate_ends_with?: Maybe<String>;
  endDate_not_ends_with?: Maybe<String>;
  events_every?: Maybe<EventWhereInput>;
  events_some?: Maybe<EventWhereInput>;
  events_none?: Maybe<EventWhereInput>;
  traveler?: Maybe<UserWhereInput>;
  AND?: Maybe<VacationWhereInput[] | VacationWhereInput>;
  OR?: Maybe<VacationWhereInput[] | VacationWhereInput>;
  NOT?: Maybe<VacationWhereInput[] | VacationWhereInput>;
}

export interface UserCreateWithoutVacationsInput {
  id?: Maybe<ID_Input>;
  username: String;
  name?: Maybe<String>;
  email?: Maybe<String>;
  password: String;
}

export interface VacationSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<VacationWhereInput>;
  AND?: Maybe<
    VacationSubscriptionWhereInput[] | VacationSubscriptionWhereInput
  >;
  OR?: Maybe<VacationSubscriptionWhereInput[] | VacationSubscriptionWhereInput>;
  NOT?: Maybe<
    VacationSubscriptionWhereInput[] | VacationSubscriptionWhereInput
  >;
}

export interface EventUpdateInput {
  date?: Maybe<String>;
  startTime?: Maybe<String>;
  endTime?: Maybe<String>;
  title?: Maybe<String>;
  description?: Maybe<String>;
  trip?: Maybe<VacationUpdateOneWithoutEventsInput>;
}

export interface EventSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<EventWhereInput>;
  AND?: Maybe<EventSubscriptionWhereInput[] | EventSubscriptionWhereInput>;
  OR?: Maybe<EventSubscriptionWhereInput[] | EventSubscriptionWhereInput>;
  NOT?: Maybe<EventSubscriptionWhereInput[] | EventSubscriptionWhereInput>;
}

export interface VacationUpdateOneWithoutEventsInput {
  create?: Maybe<VacationCreateWithoutEventsInput>;
  update?: Maybe<VacationUpdateWithoutEventsDataInput>;
  upsert?: Maybe<VacationUpsertWithoutEventsInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<VacationWhereUniqueInput>;
}

export interface VacationUpdateInput {
  title?: Maybe<String>;
  startDate?: Maybe<String>;
  endDate?: Maybe<String>;
  events?: Maybe<EventUpdateManyWithoutTripInput>;
  traveler?: Maybe<UserUpdateOneWithoutVacationsInput>;
}

export interface VacationUpdateWithoutEventsDataInput {
  title?: Maybe<String>;
  startDate?: Maybe<String>;
  endDate?: Maybe<String>;
  traveler?: Maybe<UserUpdateOneWithoutVacationsInput>;
}

export interface UserUpdateManyMutationInput {
  username?: Maybe<String>;
  name?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
}

export interface UserUpdateOneWithoutVacationsInput {
  create?: Maybe<UserCreateWithoutVacationsInput>;
  update?: Maybe<UserUpdateWithoutVacationsDataInput>;
  upsert?: Maybe<UserUpsertWithoutVacationsInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export type UserWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  username?: Maybe<String>;
}>;

export interface UserUpdateWithoutVacationsDataInput {
  username?: Maybe<String>;
  name?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
}

export interface VacationScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  startDate?: Maybe<String>;
  startDate_not?: Maybe<String>;
  startDate_in?: Maybe<String[] | String>;
  startDate_not_in?: Maybe<String[] | String>;
  startDate_lt?: Maybe<String>;
  startDate_lte?: Maybe<String>;
  startDate_gt?: Maybe<String>;
  startDate_gte?: Maybe<String>;
  startDate_contains?: Maybe<String>;
  startDate_not_contains?: Maybe<String>;
  startDate_starts_with?: Maybe<String>;
  startDate_not_starts_with?: Maybe<String>;
  startDate_ends_with?: Maybe<String>;
  startDate_not_ends_with?: Maybe<String>;
  endDate?: Maybe<String>;
  endDate_not?: Maybe<String>;
  endDate_in?: Maybe<String[] | String>;
  endDate_not_in?: Maybe<String[] | String>;
  endDate_lt?: Maybe<String>;
  endDate_lte?: Maybe<String>;
  endDate_gt?: Maybe<String>;
  endDate_gte?: Maybe<String>;
  endDate_contains?: Maybe<String>;
  endDate_not_contains?: Maybe<String>;
  endDate_starts_with?: Maybe<String>;
  endDate_not_starts_with?: Maybe<String>;
  endDate_ends_with?: Maybe<String>;
  endDate_not_ends_with?: Maybe<String>;
  AND?: Maybe<VacationScalarWhereInput[] | VacationScalarWhereInput>;
  OR?: Maybe<VacationScalarWhereInput[] | VacationScalarWhereInput>;
  NOT?: Maybe<VacationScalarWhereInput[] | VacationScalarWhereInput>;
}

export interface UserUpsertWithoutVacationsInput {
  update: UserUpdateWithoutVacationsDataInput;
  create: UserCreateWithoutVacationsInput;
}

export interface EventUpdateManyDataInput {
  date?: Maybe<String>;
  startTime?: Maybe<String>;
  endTime?: Maybe<String>;
  title?: Maybe<String>;
  description?: Maybe<String>;
}

export interface EventUpdateWithoutTripDataInput {
  date?: Maybe<String>;
  startTime?: Maybe<String>;
  endTime?: Maybe<String>;
  title?: Maybe<String>;
  description?: Maybe<String>;
}

export interface EventUpdateManyWithWhereNestedInput {
  where: EventScalarWhereInput;
  data: EventUpdateManyDataInput;
}

export interface EventUpdateManyMutationInput {
  date?: Maybe<String>;
  startTime?: Maybe<String>;
  endTime?: Maybe<String>;
  title?: Maybe<String>;
  description?: Maybe<String>;
}

export interface EventUpsertWithWhereUniqueWithoutTripInput {
  where: EventWhereUniqueInput;
  update: EventUpdateWithoutTripDataInput;
  create: EventCreateWithoutTripInput;
}

export interface EventUpdateWithWhereUniqueWithoutTripInput {
  where: EventWhereUniqueInput;
  data: EventUpdateWithoutTripDataInput;
}

export interface EventCreateInput {
  id?: Maybe<ID_Input>;
  date: String;
  startTime?: Maybe<String>;
  endTime?: Maybe<String>;
  title: String;
  description?: Maybe<String>;
  trip?: Maybe<VacationCreateOneWithoutEventsInput>;
}

export interface UserWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  username?: Maybe<String>;
  username_not?: Maybe<String>;
  username_in?: Maybe<String[] | String>;
  username_not_in?: Maybe<String[] | String>;
  username_lt?: Maybe<String>;
  username_lte?: Maybe<String>;
  username_gt?: Maybe<String>;
  username_gte?: Maybe<String>;
  username_contains?: Maybe<String>;
  username_not_contains?: Maybe<String>;
  username_starts_with?: Maybe<String>;
  username_not_starts_with?: Maybe<String>;
  username_ends_with?: Maybe<String>;
  username_not_ends_with?: Maybe<String>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  password?: Maybe<String>;
  password_not?: Maybe<String>;
  password_in?: Maybe<String[] | String>;
  password_not_in?: Maybe<String[] | String>;
  password_lt?: Maybe<String>;
  password_lte?: Maybe<String>;
  password_gt?: Maybe<String>;
  password_gte?: Maybe<String>;
  password_contains?: Maybe<String>;
  password_not_contains?: Maybe<String>;
  password_starts_with?: Maybe<String>;
  password_not_starts_with?: Maybe<String>;
  password_ends_with?: Maybe<String>;
  password_not_ends_with?: Maybe<String>;
  vacations_every?: Maybe<VacationWhereInput>;
  vacations_some?: Maybe<VacationWhereInput>;
  vacations_none?: Maybe<VacationWhereInput>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
  OR?: Maybe<UserWhereInput[] | UserWhereInput>;
  NOT?: Maybe<UserWhereInput[] | UserWhereInput>;
}

export interface EventWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  date?: Maybe<String>;
  date_not?: Maybe<String>;
  date_in?: Maybe<String[] | String>;
  date_not_in?: Maybe<String[] | String>;
  date_lt?: Maybe<String>;
  date_lte?: Maybe<String>;
  date_gt?: Maybe<String>;
  date_gte?: Maybe<String>;
  date_contains?: Maybe<String>;
  date_not_contains?: Maybe<String>;
  date_starts_with?: Maybe<String>;
  date_not_starts_with?: Maybe<String>;
  date_ends_with?: Maybe<String>;
  date_not_ends_with?: Maybe<String>;
  startTime?: Maybe<String>;
  startTime_not?: Maybe<String>;
  startTime_in?: Maybe<String[] | String>;
  startTime_not_in?: Maybe<String[] | String>;
  startTime_lt?: Maybe<String>;
  startTime_lte?: Maybe<String>;
  startTime_gt?: Maybe<String>;
  startTime_gte?: Maybe<String>;
  startTime_contains?: Maybe<String>;
  startTime_not_contains?: Maybe<String>;
  startTime_starts_with?: Maybe<String>;
  startTime_not_starts_with?: Maybe<String>;
  startTime_ends_with?: Maybe<String>;
  startTime_not_ends_with?: Maybe<String>;
  endTime?: Maybe<String>;
  endTime_not?: Maybe<String>;
  endTime_in?: Maybe<String[] | String>;
  endTime_not_in?: Maybe<String[] | String>;
  endTime_lt?: Maybe<String>;
  endTime_lte?: Maybe<String>;
  endTime_gt?: Maybe<String>;
  endTime_gte?: Maybe<String>;
  endTime_contains?: Maybe<String>;
  endTime_not_contains?: Maybe<String>;
  endTime_starts_with?: Maybe<String>;
  endTime_not_starts_with?: Maybe<String>;
  endTime_ends_with?: Maybe<String>;
  endTime_not_ends_with?: Maybe<String>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  trip?: Maybe<VacationWhereInput>;
  AND?: Maybe<EventWhereInput[] | EventWhereInput>;
  OR?: Maybe<EventWhereInput[] | EventWhereInput>;
  NOT?: Maybe<EventWhereInput[] | EventWhereInput>;
}

export interface UserCreateInput {
  id?: Maybe<ID_Input>;
  username: String;
  name?: Maybe<String>;
  email?: Maybe<String>;
  password: String;
  vacations?: Maybe<VacationCreateManyWithoutTravelerInput>;
}

export interface VacationUpdateManyMutationInput {
  title?: Maybe<String>;
  startDate?: Maybe<String>;
  endDate?: Maybe<String>;
}

export interface VacationCreateManyWithoutTravelerInput {
  create?: Maybe<
    VacationCreateWithoutTravelerInput[] | VacationCreateWithoutTravelerInput
  >;
  connect?: Maybe<VacationWhereUniqueInput[] | VacationWhereUniqueInput>;
}

export interface VacationUpdateManyDataInput {
  title?: Maybe<String>;
  startDate?: Maybe<String>;
  endDate?: Maybe<String>;
}

export interface VacationCreateWithoutTravelerInput {
  id?: Maybe<ID_Input>;
  title: String;
  startDate: String;
  endDate: String;
  events?: Maybe<EventCreateManyWithoutTripInput>;
}

export interface VacationUpsertWithWhereUniqueWithoutTravelerInput {
  where: VacationWhereUniqueInput;
  update: VacationUpdateWithoutTravelerDataInput;
  create: VacationCreateWithoutTravelerInput;
}

export interface EventCreateManyWithoutTripInput {
  create?: Maybe<EventCreateWithoutTripInput[] | EventCreateWithoutTripInput>;
  connect?: Maybe<EventWhereUniqueInput[] | EventWhereUniqueInput>;
}

export interface EventScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  date?: Maybe<String>;
  date_not?: Maybe<String>;
  date_in?: Maybe<String[] | String>;
  date_not_in?: Maybe<String[] | String>;
  date_lt?: Maybe<String>;
  date_lte?: Maybe<String>;
  date_gt?: Maybe<String>;
  date_gte?: Maybe<String>;
  date_contains?: Maybe<String>;
  date_not_contains?: Maybe<String>;
  date_starts_with?: Maybe<String>;
  date_not_starts_with?: Maybe<String>;
  date_ends_with?: Maybe<String>;
  date_not_ends_with?: Maybe<String>;
  startTime?: Maybe<String>;
  startTime_not?: Maybe<String>;
  startTime_in?: Maybe<String[] | String>;
  startTime_not_in?: Maybe<String[] | String>;
  startTime_lt?: Maybe<String>;
  startTime_lte?: Maybe<String>;
  startTime_gt?: Maybe<String>;
  startTime_gte?: Maybe<String>;
  startTime_contains?: Maybe<String>;
  startTime_not_contains?: Maybe<String>;
  startTime_starts_with?: Maybe<String>;
  startTime_not_starts_with?: Maybe<String>;
  startTime_ends_with?: Maybe<String>;
  startTime_not_ends_with?: Maybe<String>;
  endTime?: Maybe<String>;
  endTime_not?: Maybe<String>;
  endTime_in?: Maybe<String[] | String>;
  endTime_not_in?: Maybe<String[] | String>;
  endTime_lt?: Maybe<String>;
  endTime_lte?: Maybe<String>;
  endTime_gt?: Maybe<String>;
  endTime_gte?: Maybe<String>;
  endTime_contains?: Maybe<String>;
  endTime_not_contains?: Maybe<String>;
  endTime_starts_with?: Maybe<String>;
  endTime_not_starts_with?: Maybe<String>;
  endTime_ends_with?: Maybe<String>;
  endTime_not_ends_with?: Maybe<String>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  AND?: Maybe<EventScalarWhereInput[] | EventScalarWhereInput>;
  OR?: Maybe<EventScalarWhereInput[] | EventScalarWhereInput>;
  NOT?: Maybe<EventScalarWhereInput[] | EventScalarWhereInput>;
}

export interface EventCreateWithoutTripInput {
  id?: Maybe<ID_Input>;
  date: String;
  startTime?: Maybe<String>;
  endTime?: Maybe<String>;
  title: String;
  description?: Maybe<String>;
}

export interface VacationCreateOneWithoutEventsInput {
  create?: Maybe<VacationCreateWithoutEventsInput>;
  connect?: Maybe<VacationWhereUniqueInput>;
}

export interface VacationCreateInput {
  id?: Maybe<ID_Input>;
  title: String;
  startDate: String;
  endDate: String;
  events?: Maybe<EventCreateManyWithoutTripInput>;
  traveler?: Maybe<UserCreateOneWithoutVacationsInput>;
}

export interface VacationUpdateWithoutTravelerDataInput {
  title?: Maybe<String>;
  startDate?: Maybe<String>;
  endDate?: Maybe<String>;
  events?: Maybe<EventUpdateManyWithoutTripInput>;
}

export interface VacationUpdateWithWhereUniqueWithoutTravelerInput {
  where: VacationWhereUniqueInput;
  data: VacationUpdateWithoutTravelerDataInput;
}

export interface VacationUpdateManyWithoutTravelerInput {
  create?: Maybe<
    VacationCreateWithoutTravelerInput[] | VacationCreateWithoutTravelerInput
  >;
  delete?: Maybe<VacationWhereUniqueInput[] | VacationWhereUniqueInput>;
  connect?: Maybe<VacationWhereUniqueInput[] | VacationWhereUniqueInput>;
  set?: Maybe<VacationWhereUniqueInput[] | VacationWhereUniqueInput>;
  disconnect?: Maybe<VacationWhereUniqueInput[] | VacationWhereUniqueInput>;
  update?: Maybe<
    | VacationUpdateWithWhereUniqueWithoutTravelerInput[]
    | VacationUpdateWithWhereUniqueWithoutTravelerInput
  >;
  upsert?: Maybe<
    | VacationUpsertWithWhereUniqueWithoutTravelerInput[]
    | VacationUpsertWithWhereUniqueWithoutTravelerInput
  >;
  deleteMany?: Maybe<VacationScalarWhereInput[] | VacationScalarWhereInput>;
  updateMany?: Maybe<
    | VacationUpdateManyWithWhereNestedInput[]
    | VacationUpdateManyWithWhereNestedInput
  >;
}

export interface UserUpdateInput {
  username?: Maybe<String>;
  name?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  vacations?: Maybe<VacationUpdateManyWithoutTravelerInput>;
}

export interface VacationUpdateManyWithWhereNestedInput {
  where: VacationScalarWhereInput;
  data: VacationUpdateManyDataInput;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  OR?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  NOT?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}

export type VacationWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface NodeNode {
  id: ID_Output;
}

export interface VacationPreviousValues {
  id: ID_Output;
  title: String;
  startDate: String;
  endDate: String;
}

export interface VacationPreviousValuesPromise
  extends Promise<VacationPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  startDate: () => Promise<String>;
  endDate: () => Promise<String>;
}

export interface VacationPreviousValuesSubscription
  extends Promise<AsyncIterator<VacationPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  startDate: () => Promise<AsyncIterator<String>>;
  endDate: () => Promise<AsyncIterator<String>>;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface EventConnection {
  pageInfo: PageInfo;
  edges: EventEdge[];
}

export interface EventConnectionPromise
  extends Promise<EventConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<EventEdge>>() => T;
  aggregate: <T = AggregateEventPromise>() => T;
}

export interface EventConnectionSubscription
  extends Promise<AsyncIterator<EventConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<EventEdgeSubscription>>>() => T;
  aggregate: <T = AggregateEventSubscription>() => T;
}

export interface AggregateVacation {
  count: Int;
}

export interface AggregateVacationPromise
  extends Promise<AggregateVacation>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateVacationSubscription
  extends Promise<AsyncIterator<AggregateVacation>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Vacation {
  id: ID_Output;
  title: String;
  startDate: String;
  endDate: String;
}

export interface VacationPromise extends Promise<Vacation>, Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  startDate: () => Promise<String>;
  endDate: () => Promise<String>;
  events: <T = FragmentableArray<Event>>(args?: {
    where?: EventWhereInput;
    orderBy?: EventOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  traveler: <T = UserPromise>() => T;
}

export interface VacationSubscription
  extends Promise<AsyncIterator<Vacation>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  startDate: () => Promise<AsyncIterator<String>>;
  endDate: () => Promise<AsyncIterator<String>>;
  events: <T = Promise<AsyncIterator<EventSubscription>>>(args?: {
    where?: EventWhereInput;
    orderBy?: EventOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  traveler: <T = UserSubscription>() => T;
}

export interface VacationNullablePromise
  extends Promise<Vacation | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  startDate: () => Promise<String>;
  endDate: () => Promise<String>;
  events: <T = FragmentableArray<Event>>(args?: {
    where?: EventWhereInput;
    orderBy?: EventOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  traveler: <T = UserPromise>() => T;
}

export interface VacationConnection {
  pageInfo: PageInfo;
  edges: VacationEdge[];
}

export interface VacationConnectionPromise
  extends Promise<VacationConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<VacationEdge>>() => T;
  aggregate: <T = AggregateVacationPromise>() => T;
}

export interface VacationConnectionSubscription
  extends Promise<AsyncIterator<VacationConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<VacationEdgeSubscription>>>() => T;
  aggregate: <T = AggregateVacationSubscription>() => T;
}

export interface Event {
  id: ID_Output;
  date: String;
  startTime?: String;
  endTime?: String;
  title: String;
  description?: String;
}

export interface EventPromise extends Promise<Event>, Fragmentable {
  id: () => Promise<ID_Output>;
  date: () => Promise<String>;
  startTime: () => Promise<String>;
  endTime: () => Promise<String>;
  title: () => Promise<String>;
  description: () => Promise<String>;
  trip: <T = VacationPromise>() => T;
}

export interface EventSubscription
  extends Promise<AsyncIterator<Event>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  date: () => Promise<AsyncIterator<String>>;
  startTime: () => Promise<AsyncIterator<String>>;
  endTime: () => Promise<AsyncIterator<String>>;
  title: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  trip: <T = VacationSubscription>() => T;
}

export interface EventNullablePromise
  extends Promise<Event | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  date: () => Promise<String>;
  startTime: () => Promise<String>;
  endTime: () => Promise<String>;
  title: () => Promise<String>;
  description: () => Promise<String>;
  trip: <T = VacationPromise>() => T;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface EventSubscriptionPayload {
  mutation: MutationType;
  node: Event;
  updatedFields: String[];
  previousValues: EventPreviousValues;
}

export interface EventSubscriptionPayloadPromise
  extends Promise<EventSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = EventPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = EventPreviousValuesPromise>() => T;
}

export interface EventSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<EventSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = EventSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = EventPreviousValuesSubscription>() => T;
}

export interface User {
  id: ID_Output;
  username: String;
  name?: String;
  email?: String;
  password: String;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  username: () => Promise<String>;
  name: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  vacations: <T = FragmentableArray<Vacation>>(args?: {
    where?: VacationWhereInput;
    orderBy?: VacationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  username: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  vacations: <T = Promise<AsyncIterator<VacationSubscription>>>(args?: {
    where?: VacationWhereInput;
    orderBy?: VacationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  username: () => Promise<String>;
  name: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  vacations: <T = FragmentableArray<Vacation>>(args?: {
    where?: VacationWhereInput;
    orderBy?: VacationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface EventPreviousValues {
  id: ID_Output;
  date: String;
  startTime?: String;
  endTime?: String;
  title: String;
  description?: String;
}

export interface EventPreviousValuesPromise
  extends Promise<EventPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  date: () => Promise<String>;
  startTime: () => Promise<String>;
  endTime: () => Promise<String>;
  title: () => Promise<String>;
  description: () => Promise<String>;
}

export interface EventPreviousValuesSubscription
  extends Promise<AsyncIterator<EventPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  date: () => Promise<AsyncIterator<String>>;
  startTime: () => Promise<AsyncIterator<String>>;
  endTime: () => Promise<AsyncIterator<String>>;
  title: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
}

export interface AggregateEvent {
  count: Int;
}

export interface AggregateEventPromise
  extends Promise<AggregateEvent>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateEventSubscription
  extends Promise<AsyncIterator<AggregateEvent>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface EventEdge {
  node: Event;
  cursor: String;
}

export interface EventEdgePromise extends Promise<EventEdge>, Fragmentable {
  node: <T = EventPromise>() => T;
  cursor: () => Promise<String>;
}

export interface EventEdgeSubscription
  extends Promise<AsyncIterator<EventEdge>>,
    Fragmentable {
  node: <T = EventSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface VacationEdge {
  node: Vacation;
  cursor: String;
}

export interface VacationEdgePromise
  extends Promise<VacationEdge>,
    Fragmentable {
  node: <T = VacationPromise>() => T;
  cursor: () => Promise<String>;
}

export interface VacationEdgeSubscription
  extends Promise<AsyncIterator<VacationEdge>>,
    Fragmentable {
  node: <T = VacationSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface UserPreviousValues {
  id: ID_Output;
  username: String;
  name?: String;
  email?: String;
  password: String;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  username: () => Promise<String>;
  name: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  username: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
}

export interface VacationSubscriptionPayload {
  mutation: MutationType;
  node: Vacation;
  updatedFields: String[];
  previousValues: VacationPreviousValues;
}

export interface VacationSubscriptionPayloadPromise
  extends Promise<VacationSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = VacationPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = VacationPreviousValuesPromise>() => T;
}

export interface VacationSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<VacationSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = VacationSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = VacationPreviousValuesSubscription>() => T;
}

export type Long = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "User",
    embedded: false
  },
  {
    name: "Vacation",
    embedded: false
  },
  {
    name: "Event",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
